import React, { useState } from 'react';

function QuickLinks() {
  const [showLinks, setShowLinks] = useState(false);

  const toggleLinks = () => {
    setShowLinks(!showLinks);
  };

  return (
    <div className="container mt-5">
      <div className="row justify-content-center">
        <div className="col-md-6">
          <div className="d-flex align-items-center">
            <h3 className="me-3">Quick Links</h3>
            <button className="btn btn-primary" onClick={toggleLinks}>
              {showLinks ? '-' : '+'}
            </button>
          </div>
          {showLinks && (
            <ul className="list-group mt-3">
              <li className="list-group-item">Link 1</li>
              <li className="list-group-item">Link 2</li>
              <li className="list-group-item">Link 3</li>
              <li className="list-group-item">Link 4</li>
            </ul>
          )}
        </div>
      </div>
    </div>
  );
}

export default QuickLinks;


import React, { useState } from 'react';

function Product({ id, name, price, onAddToCart }) {
  return (
    <div className="product">
      <h3>{name}</h3>
      <p>Price: ${price}</p>
      <button onClick={() => onAddToCart(id)}>Add to Cart</button>
    </div>
  );
}

function ShoppingCart() {
  const [cart, setCart] = useState([]);

  const addToCart = (productId) => {
    const existingItem = cart.find(item => item.id === productId);
    if (existingItem) {
      // If the product is already in the cart, increase its quantity
      setCart(cart.map(item => item.id === productId ? { ...item, quantity: item.quantity + 1 } : item));
    } else {
      // If the product is not in the cart, add it with quantity 1
      setCart([...cart, { id: productId, quantity: 1 }]);
    }
  };

  return (
    <div className="shopping-cart">
      <h2>Shopping Cart</h2>
      <div className="cart-items">
        {cart.map(item => (
          <div key={item.id} className="cart-item">
            <p>{item.id} - Quantity: {item.quantity}</p>
          </div>
        ))}
      </div>
      <div className="products">
        <Product id={1} name="Product 1" price={10} onAddToCart={addToCart} />
        <Product id={2} name="Product 2" price={15} onAddToCart={addToCart} />
        <Product id={3} name="Product 3" price={20} onAddToCart={addToCart} />
      </div>
    </div>
  );
}

export default ShoppingCart;


import React, { useState } from "react";

const Search = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [suggestions, setSuggestions] = useState([]);

  const handleChange = (event) => {
    const value = event.target.value;
    setSearchTerm(value);

    const filteredSuggestions = suggestions.filter(suggestion =>
      suggestion.toLowerCase().includes(value.toLowerCase())
    );
    setSuggestions(filteredSuggestions);
  };

  const handleSearch = () => {
    // Here you can handle the search action
    console.log("Search term:", searchTerm);
  };

  const handleSuggestionClick = (suggestion) => {
    // Here you can handle what happens when a suggestion is clicked
    console.log("Clicked suggestion:", suggestion);
    setSearchTerm(suggestion);
    setSuggestions([]);
  };

  return (
    <div className="col-md-3">
      <form className="d-flex form-group">
        <input
          type="text"
          className="form-control w-50 px-2"
          placeholder="Search"
          value={searchTerm}
          onChange={handleChange}
        />
        <button
          type="button"
          className="btn btn-outline-success mx-1 p-1"
          onClick={handleSearch}
        >
          Search
        </button>
      </form>
      <div>
        {suggestions.map((suggestion, index) => (
          <div key={index} onClick={() => handleSuggestionClick(suggestion)}>
            {suggestion}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Search;



import React, { useState } from 'react';
import { Chicken } from './data'; // Assuming Chicken is the name of your products array

const SearchProducts = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [suggestions, setSuggestions] = useState([]);

  // Handle changes in the search input field
  const handleSearchInputChange = (e) => {
    const query = e.target.value;
    setSearchQuery(query);

    // Filter products for suggestions based on the search query
    const filteredSuggestions = Chicken.filter(product =>
      product.dish.toLowerCase().includes(query.toLowerCase())
    );
    setSuggestions(filteredSuggestions);
  };

  // Handle search submission
  const handleSearchSubmit = (e) => {
    e.preventDefault();

    // Filter products based on the search query
    const filteredResults = Chicken.filter(product =>
      product.dish.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setSearchResults(filteredResults);
  };

  return (
    <div className="col-md-3">
      <form onSubmit={handleSearchSubmit} className="d-flex form-group">
        <input
          type="text"
          className="form-control w-50 px-2"
          placeholder="Search"
          aria-label="Search"
          value={searchQuery}
          onChange={handleSearchInputChange}
        />
        <button type="submit" className="btn btn-outline-success mx-1 p-1">
          Search
        </button>
      </form>

      {/* Render suggestions */}
      <ul>
        {suggestions.map(product => (
          <li key={product.id}>{product.dish}</li>
        ))}
      </ul>

      {/* Render search results */}
      <div>
        {searchResults.map(product => (
          <div key={product.id}>
            <h3>{product.dish}</h3>
            <p>{product.description}</p>
            {/* Render other product details */}
          </div>
        ))}
      </div>
    </div>
  );
};

export default SearchProducts;
